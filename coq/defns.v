(* generated by Ott 0.25 from: src/terminals.ott src/fodtt_lnl-typing-algo.ott src/fodttstar_lnl-syntax.ott src/fodtt_lnl-flas.ott src/fodttstar-metavar.ott src/fodtt-metavar.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.


Definition var := nat. (*r term variable *)
Lemma eq_var: forall (x y : var), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_var : ott_coq_equality.
Definition con := nat. (*r term level constant *)
Lemma eq_con: forall (x y : con), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_con : ott_coq_equality.
Definition tcon := nat. (*r type level constant *)
Lemma eq_tcon: forall (x y : tcon), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_tcon : ott_coq_equality.
Definition mvar := nat. (*r term-level meta-variable *)
Lemma eq_mvar: forall (x y : mvar), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_mvar : ott_coq_equality.
Definition mtvar := nat. (*r type-level meta-variable *)
Lemma eq_mtvar: forall (x y : mtvar), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_mtvar : ott_coq_equality.
Definition mkvar := nat. (*r kind-level meta-variable *)
Lemma eq_mkvar: forall (x y : mkvar), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_mkvar : ott_coq_equality.

Definition Ixt : Set := nat.

Definition Ixc : Set := nat.

Inductive snTy : Set :=  (*r Simple Types *)
 | stype_nl_tcon (tcon5:tcon) (*r type constant *)
 | stype_nl_pi_intro (snTy1:snTy) (snTy2:snTy) (*r type of functions *).

Inductive nTy : Set :=  (*r Extended Locally Nameless Types *)
 | typestar_nl_tcon (tcon5:tcon) (*r type constant *)
 | typestar_nl_pi_intro (nTy1:nTy) (nTy2:nTy) (*r type of dependente functions *)
 | typestar_nl_pi_elim (nTy5:nTy) (nte5:nte) (*r application of a type former *)
with nte : Set :=  (*r Extended Locally Nameless Terms *)
 | termstar_nl_con (con5:con) (*r term constant *)
 | termstar_nl_ixc (ixc:Ixc) (*r indices left of $\vdash$ (context) *)
 | termstar_nl_ixt (ixt:Ixt) (*r indices right of $\vdash$ ($\Pi$ and $\Sigma$ types) *)
 | termstar_nl_pi_intro (nTy5:nTy) (nte5:nte) (*r formation of $\Pi$ type *)
 | termstar_nl_pi_elim (nte1:nte) (nte2:nte) (*r application *).

Inductive snK : Set :=  (*r Simple Kinds *)
 | skind_nl_type : snK (*r kind of all types *)
 | skind_nl_pi_intro (snTy5:snTy) (snK5:snK) (*r kind of functions *).

Inductive nK : Set :=  (*r Extended Locally Nameless Kinds *)
 | kindstar_nl_type : nK (*r kind of all types *)
 | kindstar_nl_pi_intro (nTy5:nTy) (nK5:nK) (*r kind of dependent functions *).

Definition nctx : Set := list (nTy).

Definition snsgn : Set := list (con*snTy+tcon*snK).

Definition nsgn : Set := list (con*nTy+tcon*nK).

Definition snctx : Set := list (snTy).

(*
Definition fstSig (e : (con*nTy)+(tcon*nK) ) := match e with
    | inl (c, nA) => inl c
    | inr (a, nL) => inr a
  end.
*)

Definition boundnCon (c : con) (nA : nTy) (S : nsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inl(c,nA)) S2)) /\
    (forall nA' , ~In (inl(c, nA')) S1) /\
    (forall nA' , ~In (inl(c, nA')) S2).

Definition boundnTCon (a : tcon) (nL : nK) (S : nsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inr(a,nL)) S2)) /\
    (forall nL', ~In (inr(a, nL')) S1) /\
    (forall nL', ~In (inr(a, nL')) S2).

Definition indomnCon c S :=
  exists nA,
    boundnCon c nA S.

Definition indomnTCon a S :=
  exists nL,
    boundnTCon a nL S.

(*
Definition fstsSig (e : (con*snTy)+(tcon*snK) ) := match e with
    | inl (c, tau) => inl c
    | inr (a, kappa) => inr a
  end.
*)

Definition boundsnCon (c : con) (tau : snTy) (S : snsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inl(c,tau)) S2)) /\
    forall (tau' : snTy), ~In (inl(c, tau')) S1.

Definition boundsnTCon (a : tcon) (kappa : snK) (S : snsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inr(a,kappa)) S2)) /\
    forall (kappa' : snK), ~In (inr(a,kappa')) S1.

Definition indomsnCon c S :=
  exists tau,
    boundsnCon c tau S.

Definition indomsnTCon a S :=
  exists kappa,
    boundsnTCon a kappa S.



(** definitions *)

(** funs FerasureTy *)
Fixpoint erasure_Ty (x1:nTy) : snTy:=
  match x1 with
  | (typestar_nl_tcon a) => (stype_nl_tcon a)
  | (typestar_nl_pi_elim nA nM) =>  (erasure_Ty nA ) 
  | (typestar_nl_pi_intro nA nB) => (stype_nl_pi_intro  (erasure_Ty nA )   (erasure_Ty nB ) )
end.

(** definitions *)

(** funs FerasureK *)
Fixpoint erasure_K (x1:nK) : snK:=
  match x1 with
  | kindstar_nl_type => skind_nl_type
  | (kindstar_nl_pi_intro nA nL) => (skind_nl_pi_intro  (erasure_Ty nA )   (erasure_K nL ) )
end.

(** definitions *)

(** funs Ferasuresgn *)
Fixpoint erasure_sgn (x1:nsgn) : snsgn:=
  match x1 with
  |  nil  =>  nil 
  |  (cons (inr( a , nL ))  nsgn5 )  =>  (cons (inr( a ,  (erasure_K nL )  ))   (erasure_sgn nsgn5 )  ) 
  |  (cons (inl( c , nA ))  nsgn5 )  =>  (cons (inl( c ,  (erasure_Ty nA )  ))   (erasure_sgn nsgn5 )  ) 
end.

(** definitions *)

(** funs Ferasurectx *)
Fixpoint erasure_ctx (x1:nctx) : snctx:=
  match x1 with
  |  nil  =>  nil 
  |  (cons  nA   nctx5 )  =>  (cons   (erasure_Ty nA )     (erasure_ctx nctx5 )  ) 
end.

(** definitions *)

(* defns Cshifting *)
Inductive cs_nTy : nTy -> nTy -> Prop :=    (* defn nTy *)
 | cs_nTy_tcon : forall (a:tcon),
     cs_nTy (typestar_nl_tcon a) (typestar_nl_tcon a)
 | cs_nTy_pi_intro : forall (nA nB nA' nB':nTy),
     cs_nTy nA nA' ->
     cs_nTy nB nB' ->
     cs_nTy  (typestar_nl_pi_intro nA nB)   (typestar_nl_pi_intro nA' nB') 
 | cs_nTy_pi_elim : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cs_nTy nA nA' ->
     cs_nte nM nM' ->
     cs_nTy  (typestar_nl_pi_elim nA nM)   (typestar_nl_pi_elim nA' nM') 
with cs_nte : nte -> nte -> Prop :=    (* defn nte *)
 | cs_nte_con : forall (c:con),
     cs_nte (termstar_nl_con c) (termstar_nl_con c)
 | cs_nte_ixc : forall (ixc:Ixc),
     cs_nte (termstar_nl_ixc ixc)  (termstar_nl_ixc  (S  ixc ) ) 
 | cs_nte_ixt : forall (ixt:Ixt),
     cs_nte (termstar_nl_ixt ixt) (termstar_nl_ixt ixt)
 | cs_nte_pi_intro : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cs_nTy nA nA' ->
     cs_nte nM nM' ->
     cs_nte  (termstar_nl_pi_intro nA nM)   (termstar_nl_pi_intro nA' nM') 
 | cs_nte_pi_elim : forall (nM nN nM' nN':nte),
     cs_nte nM nM' ->
     cs_nte nN nN' ->
     cs_nte  (termstar_nl_pi_elim nM nN)   (termstar_nl_pi_elim nM' nN') .
(** definitions *)

(* defns Cshiftingctx *)
Inductive cs_nctx : nctx -> nctx -> Prop :=    (* defn cs_nctx *)
 | cs_nctx_empty : 
     cs_nctx  nil   nil 
 | cs_nctx_var : forall (nctx5:nctx) (nA nA':nTy) (nctx':nctx),
     cs_nctx nctx5 nctx' ->
     cs_nTy nA nA' ->
     cs_nctx  (cons  nA   nctx5 )   (cons  nA'   nctx5 ) .
(** definitions *)

(* defns Cunshifting *)
Inductive cu_cunshifting_Ty : nTy -> nTy -> Prop :=    (* defn cunshifting_Ty *)
 | cu_Ty_1 : forall (a:tcon),
     cu_cunshifting_Ty (typestar_nl_tcon a) (typestar_nl_tcon a)
 | cu_Ty_2 : forall (nA nB nA' nB':nTy),
     cu_cunshifting_Ty nA nA' ->
     cu_cunshifting_Ty nB nB' ->
     cu_cunshifting_Ty  (typestar_nl_pi_intro nA nB)   (typestar_nl_pi_intro nA' nB') 
 | cu_Ty_3 : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cu_cunshifting_Ty nA nA' ->
     cu_cunshifting_te nM nM' ->
     cu_cunshifting_Ty  (typestar_nl_pi_elim nA nM)   (typestar_nl_pi_elim nA' nM') 
with cu_cunshifting_te : nte -> nte -> Prop :=    (* defn cunshifting_te *)
 | cu_te_1 : forall (c:con),
     cu_cunshifting_te (termstar_nl_con c) (termstar_nl_con c)
 | cu_te_2 : forall (ixc:Ixc),
     cu_cunshifting_te  (termstar_nl_ixc  (S  ixc ) )  (termstar_nl_ixc ixc)
 | cu_te_3 : forall (ixt:Ixt),
     cu_cunshifting_te (termstar_nl_ixt ixt) (termstar_nl_ixt ixt)
 | cu_te_4 : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cu_cunshifting_Ty nA nA' ->
     cu_cunshifting_te nM nM' ->
     cu_cunshifting_te  (termstar_nl_pi_intro nA nM)   (termstar_nl_pi_intro nA' nM') 
 | cu_te_5 : forall (nM nN nM' nN':nte),
     cu_cunshifting_te nM nM' ->
     cu_cunshifting_te nN nN' ->
     cu_cunshifting_te  (termstar_nl_pi_elim nM nN)   (termstar_nl_pi_elim nM' nN') .
(** definitions *)

(* defns Cunshiftingctx *)
Inductive cu_ctx : nctx -> nctx -> Prop :=    (* defn cu_ctx *)
 | cu_ctx_empty : 
     cu_ctx  nil   nil 
 | cu_ctx_var : forall (nctx5:nctx) (nA:nTy) (nctx':nctx) (nA':nTy),
     cu_ctx nctx5 nctx' ->
     cu_cunshifting_Ty nA nA' ->
     cu_ctx  (cons  nA   nctx5 )   (cons  nA'   nctx' ) .
(** definitions *)

(* defns CshiftingTunshifting *)
Inductive cstu_nTy : nTy -> nTy -> Prop :=    (* defn nTy *)
 | cstu_nTy_tcon : forall (a:tcon),
     cstu_nTy (typestar_nl_tcon a) (typestar_nl_tcon a)
 | cstu_nTy_pi_intro : forall (nA nB nA' nB':nTy),
     cstu_nTy nA nA' ->
     cstu_nTy nB nB' ->
     cstu_nTy  (typestar_nl_pi_intro nA nB)   (typestar_nl_pi_intro nA' nB') 
 | cstu_nTy_pi_elim : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cstu_nTy nA nA' ->
     cstu_nte nM nM' ->
     cstu_nTy  (typestar_nl_pi_elim nA nM)   (typestar_nl_pi_elim nA' nM') 
with cstu_nte : nte -> nte -> Prop :=    (* defn nte *)
 | cstu_nte_con : forall (c:con),
     cstu_nte (termstar_nl_con c) (termstar_nl_con c)
 | cstu_nte_ixc : forall (ixc:Ixc),
     cstu_nte (termstar_nl_ixc ixc)  (termstar_nl_ixc  (S  ixc ) ) 
 | cstu_nte_zerot : 
     cstu_nte (termstar_nl_ixt  0 ) (termstar_nl_ixc  0 )
 | cstu_nte_suct : forall (ixt:Ixt),
     cstu_nte  (termstar_nl_ixt  (S  ixt ) )  (termstar_nl_ixt ixt)
 | cstu_nte_pi_intro : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cstu_nTy nA nA' ->
     cstu_nte nM nM' ->
     cstu_nte  (termstar_nl_pi_intro nA nM)   (termstar_nl_pi_intro nA' nM') 
 | cstu_nte_pi_elim : forall (nM nN nM' nN':nte),
     cstu_nte nM nM' ->
     cstu_nte nN nN' ->
     cstu_nte  (termstar_nl_pi_elim nM nN)   (termstar_nl_pi_elim nM' nN') .
(** definitions *)

(* defns CshiftingTunshiftingK *)
Inductive cstu_nK : nK -> nK -> Prop :=    (* defn cstu_nK *)
 | cstu_K_type : 
     cstu_nK kindstar_nl_type kindstar_nl_type
 | cstu_K_pi_intro : forall (nA:nTy) (nL:nK) (nA':nTy) (nL':nK),
     cstu_nTy nA nA' ->
     cstu_nK nL nL' ->
     cstu_nK  (kindstar_nl_pi_intro nA nL)   (kindstar_nl_pi_intro nA' nL') .
(** definitions *)

(* defns CunshiftingTshifting *)
Inductive cuts_nTy : nTy -> nTy -> Prop :=    (* defn nTy *)
 | cuts_nTy_tcon : forall (a:tcon),
     cuts_nTy (typestar_nl_tcon a) (typestar_nl_tcon a)
 | cuts_nTy_pi_intro : forall (nA nB nA' nB':nTy),
     cuts_nTy nA nA' ->
     cuts_nTy nB nB' ->
     cuts_nTy  (typestar_nl_pi_intro nA nB)   (typestar_nl_pi_intro nA' nB') 
 | cuts_nTy_pi_elim : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cuts_nTy nA nA' ->
     cuts_nte nM nM' ->
     cuts_nTy  (typestar_nl_pi_elim nA nM)   (typestar_nl_pi_elim nA' nM') 
with cuts_nte : nte -> nte -> Prop :=    (* defn nte *)
 | cuts_nte_con : forall (c:con),
     cuts_nte (termstar_nl_con c) (termstar_nl_con c)
 | cuts_nte_succ : forall (ixc:Ixc),
     cuts_nte  (termstar_nl_ixc  (S  ixc ) )  (termstar_nl_ixc ixc)
 | cuts_nte_zeroc : 
     cuts_nte (termstar_nl_ixc  0 ) (termstar_nl_ixt  0 )
 | cuts_nte_ixt : forall (ixt:Ixt),
     cuts_nte (termstar_nl_ixt ixt)  (termstar_nl_ixt  (S  ixt ) ) 
 | cuts_nte_pi_intro : forall (nA:nTy) (nM:nte) (nA':nTy) (nM':nte),
     cuts_nTy nA nA' ->
     cuts_nte nM nM' ->
     cuts_nte  (termstar_nl_pi_intro nA nM)   (termstar_nl_pi_intro nA' nM') 
 | cuts_nte_pi_elim : forall (nM nN nM' nN':nte),
     cuts_nte nM nM' ->
     cuts_nte nN nN' ->
     cuts_nte  (termstar_nl_pi_elim nM nN)   (termstar_nl_pi_elim nM' nN') .
(** definitions *)

(* defns TunshiftingTsubst *)
Inductive tuts_nTy : nTy -> nte -> nTy -> Prop :=    (* defn nTy *)
 | tuts_nTy_tcon : forall (a:tcon) (nN:nte),
     tuts_nTy (typestar_nl_tcon a) nN (typestar_nl_tcon a)
 | tuts_nTy_pi_intro : forall (nA nB:nTy) (nN:nte) (nA' nB':nTy),
     tuts_nTy nA nN nA' ->
     tuts_nTy nB nN nB' ->
     tuts_nTy (typestar_nl_pi_intro nA nB) nN  (typestar_nl_pi_intro nA' nB') 
 | tuts_nTy_pi_elim : forall (nA:nTy) (nM nN:nte) (nA':nTy) (nM':nte),
     tuts_nTy nA nN nA' ->
     tuts_nte nM nN nM' ->
     tuts_nTy (typestar_nl_pi_elim nA nM) nN  (typestar_nl_pi_elim nA' nM') 
with tuts_nte : nte -> nte -> nte -> Prop :=    (* defn nte *)
 | tuts_nte_con : forall (c:con) (nN:nte),
     tuts_nte (termstar_nl_con c) nN (termstar_nl_con c)
 | tuts_nte_ixc : forall (ixc:Ixc) (nN:nte),
     tuts_nte (termstar_nl_ixc ixc) nN (termstar_nl_ixc ixc)
 | tuts_nte_ixt_zero : forall (nN:nte),
     tuts_nte (termstar_nl_ixt  0 ) nN nN
 | tuts_nte_ixt_succ : forall (ixt:Ixt) (nN:nte),
     tuts_nte (termstar_nl_ixt  (S  ixt ) ) nN (termstar_nl_ixt ixt)
 | tuts_nte_pi_intro : forall (nA:nTy) (nM nN:nte) (nA':nTy) (nM':nte),
     tuts_nTy nA nN nA' ->
     tuts_nte nM nN nM' ->
     tuts_nte (termstar_nl_pi_intro nA nM) nN  (termstar_nl_pi_intro nA' nM') 
 | tuts_nte_pi_elim : forall (nM nN nN1 nM' nN':nte),
     tuts_nte nM nN1 nM' ->
     tuts_nte nN nN1 nN' ->
     tuts_nte (termstar_nl_pi_elim nM nN) nN1  (termstar_nl_pi_elim nM' nN') .
(** definitions *)

(* defns TunshiftingTsubstK *)
Inductive tuts_nK : nK -> nte -> nK -> Prop :=    (* defn tuts_nK *)
 | tuts_nK_type : forall (nN:nte),
     tuts_nK kindstar_nl_type nN kindstar_nl_type
 | tuts_nK_pi_intro : forall (nA:nTy) (nL:nK) (nN:nte) (nA':nTy) (nL':nK),
     tuts_nTy nA nN nA' ->
     tuts_nK nL nN nL' ->
     tuts_nK (kindstar_nl_pi_intro nA nL) nN  (kindstar_nl_pi_intro nA' nL') .
(** definitions *)

(* defns Jwelformednl_simple *)
Inductive wfssig_nl : snsgn -> Prop :=    (* defn wfssig_nl *)
 | snsig_nl_empty : 
     wfssig_nl  nil 
 | snsig_nl_tcon : forall (snsgn5:snsgn) (a:tcon) (kappa:snK),
     wfssig_nl snsgn5 ->
      (not (indomsnTCon  a   snsgn5 ))  ->
     wfssig_nl  (cons (inr( a , kappa ))  snsgn5 ) 
 | snsig_nl_con : forall (snsgn5:snsgn) (c:con) (tau:snTy),
     wfssig_nl snsgn5 ->
      (not (indomsnCon  c   snsgn5 ))  ->
     wfssig_nl  (cons (inl( c , tau ))  snsgn5 ) .
(** definitions *)

(* defns Jwellformednl_alg *)
Inductive wfsig_nl : nsgn -> Prop :=    (* defn wfsig_nl *)
 | sig_nl_empty : 
     wfsig_nl  nil 
 | sig_nl_tcon : forall (nsgn5:nsgn) (a:tcon) (nL:nK),
     wfsig_nl nsgn5 ->
     wfkind_nl nsgn5  nil  nL ->
      (not (indomnTCon  a   nsgn5 ))  ->
     wfsig_nl  (cons (inr( a , nL ))  nsgn5 ) 
 | sig_nl_con : forall (nsgn5:nsgn) (c:con) (nA:nTy),
     wfsig_nl nsgn5 ->
     wftype_nl nsgn5  nil  nA kindstar_nl_type ->
      (not (indomnCon  c   nsgn5 ))  ->
     wfsig_nl  (cons (inl( c , nA ))  nsgn5 ) 
with wfctx_nl : nsgn -> nctx -> Prop :=    (* defn wfctx_nl *)
 | ctx_nl_empty : forall (nsgn5:nsgn),
     wfsig_nl nsgn5 ->
     wfctx_nl nsgn5  nil 
 | ctx_nl_var : forall (nsgn5:nsgn) (nctx5:nctx) (nA:nTy) (nctx':nctx) (nA':nTy),
     cu_ctx nctx5 nctx' ->
     wfctx_nl nsgn5 nctx' ->
     cu_cunshifting_Ty nA nA' ->
     wftype_nl nsgn5 nctx' nA' kindstar_nl_type ->
     wfctx_nl nsgn5  (cons  nA   nctx5 ) 
with wfkind_nl : nsgn -> nctx -> nK -> Prop :=    (* defn wfkind_nl *)
 | k_n_type : forall (nsgn5:nsgn) (nctx5:nctx),
     wfctx_nl nsgn5 nctx5 ->
     wfkind_nl nsgn5 nctx5 kindstar_nl_type
 | k_n_pi_intro : forall (nsgn5:nsgn) (nctx5:nctx) (nA:nTy) (nL:nK) (nctx':nctx) (nL':nK),
     wftype_nl nsgn5 nctx5 nA kindstar_nl_type ->
     cs_nctx  (cons  nA   nctx5 )  nctx' ->
     cstu_nK nL nL' ->
     wfkind_nl nsgn5 nctx' nL' ->
     wfkind_nl nsgn5 nctx5 (kindstar_nl_pi_intro nA nL)
with wftype_nl : nsgn -> nctx -> nTy -> nK -> Prop :=    (* defn wftype_nl *)
 | ty_nl_tcon : forall (nsgn5:nsgn) (nctx5:nctx) (a:tcon) (nL:nK),
     wfctx_nl nsgn5 nctx5 ->
      (boundnTCon  a   nL   nsgn5 )  ->
     wftype_nl nsgn5 nctx5 (typestar_nl_tcon a) nL
 | ty_nl_pi_intro : forall (nsgn5:nsgn) (nctx5:nctx) (nA nB:nTy) (nctx':nctx) (nB':nTy),
     wftype_nl nsgn5 nctx5 nA kindstar_nl_type ->
     cs_nctx  (cons  nA   nctx5 )  nctx' ->
     cstu_nTy nB nB' ->
     wftype_nl nsgn5 nctx' nB' kindstar_nl_type ->
     wftype_nl nsgn5 nctx5 (typestar_nl_pi_intro nA nB) kindstar_nl_type
 | ty_nl_pi_elim : forall (nsgn5:nsgn) (nctx5:nctx) (nA:nTy) (nM:nte) (nL':nK) (nB':nTy) (nL:nK) (nB:nTy),
     wftype_nl nsgn5 nctx5 nA (kindstar_nl_pi_intro nB' nL) ->
     wfterm_nl nsgn5 nctx5 nM nB ->
     walgeq_nl_Ty  (erasure_sgn nsgn5 )   (erasure_ctx nctx5 )  nB nB' skind_nl_type ->
     tuts_nK nL nM nL' ->
     wftype_nl nsgn5 nctx5 (typestar_nl_pi_elim nA nM) nL'
with wfterm_nl : nsgn -> nctx -> nte -> nTy -> Prop :=    (* defn wfterm_nl *)
 | te_nl_con : forall (nsgn5:nsgn) (nctx5:nctx) (c:con) (nA:nTy),
     wfctx_nl nsgn5 nctx5 ->
      (boundnCon  c   nA   nsgn5 )  ->
     wfterm_nl nsgn5 nctx5 (termstar_nl_con c) nA
 | te_nl_var_zero : forall (nsgn5:nsgn) (nctx5:nctx) (nA:nTy),
     wfctx_nl nsgn5  (cons  nA   nctx5 )  ->
     wfterm_nl nsgn5  (cons  nA   nctx5 )  (termstar_nl_ixc  0 ) nA
 | te_nl_var_succ : forall (nsgn5:nsgn) (nctx5:nctx) (nB:nTy) (ixc:Ixc) (nA':nTy) (nctx':nctx) (nA:nTy),
     cu_ctx nctx5 nctx' ->
     wfterm_nl nsgn5 nctx' (termstar_nl_ixc ixc) nA ->
     cs_nTy nA nA' ->
     wfterm_nl nsgn5  (cons  nB   nctx5 )  (termstar_nl_ixc  (S  ixc ) ) nA'
 | te_nl_pi_intro : forall (nsgn5:nsgn) (nctx5:nctx) (nA1:nTy) (nM2:nte) (nA2':nTy) (nctx':nctx) (nM2':nte) (nA2:nTy),
     wftype_nl nsgn5 nctx5 nA1 kindstar_nl_type ->
     cs_nctx  (cons  nA1   nctx5 )  nctx' ->
     cstu_nte nM2 nM2' ->
     wfterm_nl nsgn5 nctx' nM2' nA2 ->
     cuts_nTy nA2 nA2' ->
     wfterm_nl nsgn5 nctx5 (termstar_nl_pi_intro nA1 nM2) (typestar_nl_pi_intro nA1 nA2')
 | te_nl_pi_elim : forall (nsgn5:nsgn) (nctx5:nctx) (nM1 nM2:nte) (nB nA2' nA1 nA2:nTy),
     wfterm_nl nsgn5 nctx5 nM1 (typestar_nl_pi_intro nA2' nA1) ->
     wfterm_nl nsgn5 nctx5 nM2 nA2 ->
     walgeq_nl_Ty  (erasure_sgn nsgn5 )   (erasure_ctx nctx5 )  nA2 nA2' skind_nl_type ->
     tuts_nTy nA2 nM2 nB ->
     wfterm_nl nsgn5 nctx5 (termstar_nl_pi_elim nM1 nM2) nB
with algeq_nl_K : snsgn -> snctx -> nK -> nK -> Prop :=    (* defn algeq_nl_K *)
 | algeq_nl_K_type : forall (snsgn5:snsgn) (snctx5:snctx),
     wfssig_nl snsgn5 ->
     algeq_nl_K snsgn5 snctx5 kindstar_nl_type kindstar_nl_type
 | algeq_nl_K_pi_intro : forall (snsgn5:snsgn) (snctx5:snctx) (nA:nTy) (nK5:nK) (nB:nTy) (nL nK' nL':nK),
     walgeq_nl_Ty snsgn5 snctx5 nA nB skind_nl_type ->
     cstu_nK nK5 nK' ->
     cstu_nK nL nL' ->
     algeq_nl_K snsgn5  (cons   (erasure_Ty nA )    snctx5 )  nK' nL' ->
     algeq_nl_K snsgn5 snctx5 (kindstar_nl_pi_intro nA nK5) (kindstar_nl_pi_intro nB nL)
with walgeq_nl_Ty : snsgn -> snctx -> nTy -> nTy -> snK -> Prop :=    (* defn walgeq_nl_Ty *)
 | walgeq_nl_Ty_refl : forall (snsgn5:snsgn) (snctx5:snctx) (a:tcon) (kappa:snK),
     wfssig_nl snsgn5 ->
      (boundsnTCon  a   kappa   snsgn5 )  ->
     walgeq_nl_Ty snsgn5 snctx5 (typestar_nl_tcon a) (typestar_nl_tcon a) kappa
 | walgeq_nl_Ty_pi_intro : forall (snsgn5:snsgn) (snctx5:snctx) (nA1 nA2 nB1 nB2 nA2' nB2':nTy),
     walgeq_nl_Ty snsgn5 snctx5 nA1 nB1 skind_nl_type ->
     cstu_nTy nA2 nA2' ->
     cstu_nTy nB2 nB2' ->
     walgeq_nl_Ty snsgn5  (cons   (erasure_Ty nA1 )    snctx5 )  nA2' nB2' skind_nl_type ->
     walgeq_nl_Ty snsgn5 snctx5  (typestar_nl_pi_intro nA1 nA2)   (typestar_nl_pi_intro nB1 nB2)  skind_nl_type
 | walgeq_nl_Ty_pi_elim : forall (snsgn5:snsgn) (snctx5:snctx) (nA:nTy) (nM:nte) (nB:nTy) (nN:nte) (kappa:snK) (tau:snTy),
     walgeq_nl_Ty snsgn5 snctx5 nA nB (skind_nl_pi_intro tau kappa) ->
     algeq_nl_te snsgn5 snctx5 nM nN tau ->
     walgeq_nl_Ty snsgn5 snctx5 (typestar_nl_pi_elim nA nM) (typestar_nl_pi_elim nB nN) kappa
with whr_nl_te : nte -> nte -> Prop :=    (* defn whr_nl_te *)
 | whr_nl_te_subst : forall (nA:nTy) (nM nN nM':nte),
     tuts_nte nM nN nM' ->
     whr_nl_te (termstar_nl_pi_elim  (termstar_nl_pi_intro nA nM)  nN) nM'
 | whr_nl_te_head : forall (nM nN nM':nte),
     whr_nl_te nM nM' ->
     whr_nl_te (termstar_nl_pi_elim nM nN) (termstar_nl_pi_elim nM' nN)
with algeq_nl_te : snsgn -> snctx -> nte -> nte -> snTy -> Prop :=    (* defn algeq_nl_te *)
 | algeq_nl_te_whr_l : forall (snsgn5:snsgn) (snctx5:snctx) (nM nN:nte) (a:tcon) (nM':nte),
     whr_nl_te nM nM' ->
     algeq_nl_te snsgn5 snctx5 nM' nN (stype_nl_tcon a) ->
     algeq_nl_te snsgn5 snctx5 nM nN (stype_nl_tcon a)
 | algeq_nl_te_whr_r : forall (snsgn5:snsgn) (snctx5:snctx) (nM nN:nte) (a:tcon) (nN':nte),
     whr_nl_te nN nN' ->
     algeq_nl_te snsgn5 snctx5 nM nN' (stype_nl_tcon a) ->
     algeq_nl_te snsgn5 snctx5 nM nN (stype_nl_tcon a)
 | algeq_nl_te_streq : forall (snsgn5:snsgn) (snctx5:snctx) (nM nN:nte) (a:tcon),
     streq_nl_te snsgn5 snctx5 nM nN (stype_nl_tcon a) ->
     algeq_nl_te snsgn5 snctx5 nM nN (stype_nl_tcon a)
 | algeq_nl_te_eta_exp : forall (snsgn5:snsgn) (snctx5:snctx) (nM nN:nte) (tau1 tau2:snTy) (nM' nN':nte),
     cs_nte nM nM' ->
     cs_nte nN nN' ->
     algeq_nl_te snsgn5  (cons  tau1   snctx5 )   (termstar_nl_pi_elim nM' (termstar_nl_ixc  0 ))   (termstar_nl_pi_elim nN' (termstar_nl_ixc  0 ))  tau2 ->
     algeq_nl_te snsgn5 snctx5 nM nN (stype_nl_pi_intro tau1 tau2)
with streq_nl_te : snsgn -> snctx -> nte -> nte -> snTy -> Prop :=    (* defn streq_nl_te *)
 | streq_nl_te_var_zero : forall (snsgn5:snsgn) (snctx5:snctx) (tau:snTy),
     wfssig_nl snsgn5 ->
     streq_nl_te snsgn5  (cons  tau   snctx5 )  (termstar_nl_ixc  0 ) (termstar_nl_ixc  0 ) tau
 | streq_nl_te_var_succ : forall (snsgn5:snsgn) (snctx5:snctx) (tau':snTy) (ixc:Ixc) (tau:snTy),
     wfssig_nl snsgn5 ->
     streq_nl_te snsgn5 snctx5 (termstar_nl_ixc ixc) (termstar_nl_ixc ixc) tau ->
     streq_nl_te snsgn5  (cons  tau'   snctx5 )  (termstar_nl_ixc  (S  ixc ) ) (termstar_nl_ixc  (S  ixc ) ) tau
 | streq_nl_te_con : forall (snsgn5:snsgn) (snctx5:snctx) (c:con) (tau:snTy),
     wfssig_nl snsgn5 ->
      (boundsnCon  c   tau   snsgn5 )  ->
     streq_nl_te snsgn5 snctx5 (termstar_nl_con c) (termstar_nl_con c) tau
 | streq_nl_te_pi_elim : forall (snsgn5:snsgn) (snctx5:snctx) (nM1 nM2 nN1 nN2:nte) (tau1 tau2:snTy),
     streq_nl_te snsgn5 snctx5 nM1 nN1 (stype_nl_pi_intro tau2 tau1) ->
     algeq_nl_te snsgn5 snctx5 nM2 nN2 tau2 ->
     streq_nl_te snsgn5 snctx5 (termstar_nl_pi_elim nM1 nM2) (termstar_nl_pi_elim nN1 nN2) tau1.


