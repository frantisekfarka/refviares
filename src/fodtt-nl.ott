embed
{{ tex-preamble
\renewcommand{\[[TEX_NAME_PREFIX]]grammartabular}[1]
{\begin{minipage}{\columnwidth}\begin{tabular}{ll}#1\end{tabular}\end{minipage} }
\renewcommand{\[[TEX_NAME_PREFIX]]rulehead}[3]
{$#1$ $#2$ & $#3$}
\renewcommand{\[[TEX_NAME_PREFIX]]prodline}[6]
{ \quad $#1$ \ $#2$ & \quad $#3 #4$ $#5$ $#6$}
\renewcommand{\[[TEX_NAME_PREFIX]]interrule}
{\\[2.0mm]}
}}

metavar con {{tex \mathcal{C} }}, c ::=   {{ com  term constant }} 
{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[con]]} }} {{ ocamllex Alphanum }}

metavar tcon {{ tex \mathcal{B} }}, alpha {{ tex \alpha}}, beta {{ tex \beta }} ::=   {{ com  type constants}} 
{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[tcon]]} }} {{ ocamllex Alphanum }}

grammar
%var {{ tex \mathcal{V} }} :: 'var_' ::= {{com deBruijn indices }}
%  | zero                ::   :: zero  
%  | succ var            ::   :: succ

cdb, ic {{tex \iota_\Gamma }} :: 'cdb_' ::= {{com deBruijn indices for contexts }}
  | zeroc                ::   :: zero  
  | succ cdb            ::   :: succ

pdb, ip {{tex \iota_\Pi }} :: 'pdb_' ::= {{com deBruijn indices for pi types }}
  | zerop                ::   :: zero  
  | sucp pdb            ::   :: succ

K :: 'kind_' ::= {{ com Kinds }}
  | typeK         ::   :: type {{ com kind of all types }} 
  | Pi T . K      ::   :: pi    {{ com kind of dependent functions }}
%  | Sigma var : T . K   ::   :: sigma (+ bind var in K +) {{ com kind of dependent pairs }}
%  | K [ t / pdb ]       ::   :: substp {{ tex [[K]] [ [[t]] / [[pdb]] ] }} {{ com substitution on kind }}
%  | K [ t / cdb ]       ::   :: substc {{ tex [[K]] [ [[t]] / [[cdb]] ] }} {{ com substitution on kind }}

T, A, B :: 'type_' ::= {{ com Types }}
  | tcon          ::   :: tcon  {{ com type constant }}
  | T t           ::   :: tapp  {{ com application of a type former }}
  | Pi T . T'     ::   :: pi    {{ com type of dependent functions }}
%  | ( T )            ::   :: typaren
%  | T ap s           ::   :: tysubst {{ tex [[T]] [ [[s]] ] }}
%  | Sigma var : T. T'  ::   :: sigma  (+ bind var in T' +) {{ com kind of dependent pairs }}
%  | T [ t / pdb ] ::   :: substp {{ tex [[T]] [ [[t]] / [[pdb]] ] }} {{ com substitution on type }}

t, M, N :: 'term_' ::= {{ com Terms }}
  | cdb           ::   :: cdb                    {{ com indices left of $\vdash$ (context) }} 
  | pdb           ::   :: pdb                    {{ com indices right of $\vdash$ ($\Pi$ and $\Sigma$ types) }} 
  | con           ::   :: const                 {{ com term constants }} 
  | \ T . t       ::   :: lam                   {{ com formation of $\Pi$ type }}
  | t t'          ::   :: app                   {{ com application }}
%  | < t , t' >       ::   :: sigma                 {{ com dependent pair }}
%%  | c_sig ( t , t' ) ::   :: el                    {{ com dependent pair elimination }} 
%  | ( t )        ::   :: teparen
%  | t ap s       ::   :: tesubst {{ tex [[t]] [ [[s]] ] }}
  | ( t )         :: M  :: paren  
%  | t [ t' / cdb  ]      ::   :: csubst {{ tex [[t]] [ [[t']] / [[cdb]] ] }} {{ com substitution of term}}
%  | t [ t' / pdb  ]      ::   :: psubst {{ tex [[t]] [ [[t]] / [[pdb]] ] }} {{ com substitution of term}}

sig {{ tex \mathcal{S} }} :: 'signature_' ::= {{ com signature }}
  | empty     ::   :: empty
  | sig , con : T  ::   :: sigconst
  | sig , tcon : K  ::   :: sigtype

ctx {{ tex \Gamma }} :: 'context_' ::= {{ com context }}
  | empty    ::   :: empty
  | ctx , T  ::   :: ctxvar

terminals :: 'terminals_' ::=
  | typeK        ::   :: type     {{ tex \text{type} }}
  | kindS        ::   :: kind     {{ tex \text{kind} }}
  | \            ::   :: lambda   {{ tex \lambda }}
  | Pi           ::   :: pi       {{ tex \Pi }}
%  | Sigma        ::   :: sigma    {{ tex \Sigma }}
  | empty     ::   :: empty {{ tex \cdot}}
  | empty     ::   :: empty {{ tex \cdot}}
  | <            ::   :: lpar     {{ tex \langle }}
  | >            ::   :: rpar     {{ tex \rangle }}
  | c_sig        ::   :: csig     {{ tex c_\Sigma }} 
%  | substempty   ::   :: substempty {{ tex \cdot}}
  | zeroc        ::   :: zeroc     {{ tex 0_\Gamma }}
  | succ        ::   :: succ     {{ tex \sigma_\Gamma }}
  | zerop        ::   :: zerop     {{ tex 0_\Pi }}
  | sucp        ::   :: sucp     {{ tex \sigma_\Pi }}

formula :: formula_ ::=          
  | judgement              :: :: judgement
  | c notin dom ( sig )           :: :: cnotinsig     
                                         {{ tex [[c]] \not\in \dom([[sig]]) }}
  | alpha notin dom ( sig )           :: :: bnotinsig     
                                         {{ tex [[alpha]] \not\in \dom([[sig]]) }}
  | c : A in sig           :: :: cinsig     
                                         {{ tex [[c]] : [[A]] \in [[sig]] }}
  | alpha : K in sig           :: :: binsig     
                                         {{ tex [[alpha]] : [[K]] \in [[sig]] }}


funs
  Pinc ::= 
fun
  pincK K1 :: K :: pincK {{ tex \uparrow [[K1]] }} {{ com type index increment $\Gamma \to \Pi$}}
by
  pincK typeK  === typeK
  pincK Pi T . K  === Pi pincTy T . pincK K
fun
  pincTy T1 :: T :: pincTy {{ tex \uparrow [[T1]] }} {{ com type index increment $\Gamma \to \Pi$}}
by
  pincTy alpha === alpha
  pincTy T t   === pincTy T pincte t
  pincTy Pi T . T'  === Pi pincTy T  . pincTy T'
fun
  pincte t1 :: t :: pincte {{ tex \uparrow [[t1]] }} {{ com type index increment $\Gamma \to \Pi$}}
by
  pincte zeroc    === zerop
  pincte sucp ip  === ip
  pincte ip       === sucp ip
  pincte c        === c
  pincte \ T . t' === \ pincTy T . pincte t' 
  pincte t1 t2    === pincte t1 pincte t2 

funs
  Psubst ::= 
fun
  psubsK ( K1 ) t :: K :: psubsK {{ tex ( [[K1]] ) [ [[t]] ] }} {{ com substitute under  $\Pi$ binder }}
by
  psubsK ( typeK ) t  === typeK
  psubsK ( Pi T . K ) t  === Pi psubsTy (T) t . psubsK (K) t

fun
  psubsTy ( T1 ) t :: T :: psubsTy {{tex ( [[T1]] ) [ [[t]] ]  }} {{ com substitute under  $\Pi$ binder }}
by
  psubsTy ( alpha ) t  === alpha
  psubsTy ( T t') t   === psubsTy (T) t psubste (t') t
  psubsTy ( Pi T . T') t   === Pi psubsTy (T) t  . psubsTy (T') t

fun
  psubste ( t1 ) t2 :: t :: psubste {{ tex ( [[t1]] ) [ [[t2]] ] }} {{ com substitute under $\Pi$ binder }}
by
  psubste ( ic ) t  === ic
  psubste ( zerop ) t  === t
  psubste ( sucp ip ) t  === ip
  psubste ( x ) t  === x
  psubste ( c ) t  === c
  psubste ( \ T . t' ) t  === \ psubsTy (T) t' . psubste ( t' ) t
  psubste ( t1 t2) t === psubste (t1) t psubste (t2) t


%defns
%Jaux :: '' ::=
%
% defn
% cdb islen ctx :: ::  lenctx :: 'lenctx_' {{ tex [[cdb]] \equiv \len([[ctx]])}} by 
%
%   ------------------- :: 1
%   zero islen empty
%
%   ic islen ctx
%   -------------------- :: 2
%   succ ic islen ctx,A
%
%   c isin dom(sig)
%   -------------------- :: 3
%   c isin dom(sig,c':T)


defns
Jwellformed :: '' ::=


 defn
 |-sig sig :: ::wfsig::'sig_' {{ tex \vdash [[sig]] \text{ sig} }} by

    ---------------  :: empty
    |-sig empty

    |-sig sig
    sig ; empty |- K : kindS
    alpha notin dom(sig)
    -------------------------- :: type
    |-sig sig,alpha:K

    |-sig sig
    sig ; empty |- A : typeK
    c notin dom(sig) 
    -------------------------- :: con
    |-sig sig,c:A

  defn
  sig |-ctx ctx :: ::wfcon::'ctx_' {{tex [[sig]] \vdash [[ctx]] \text{ ctx} }} by
   
    |-sig sig
    --------------------  :: empty
    sig |-ctx empty

    sig |-ctx ctx
    sig ; ctx |- A : typeK
    -------------------------- :: var
    sig |-ctx ctx,A

  defn
  sig ; ctx |- K : kindS :: ::wfkind::'k_' {{tex [[sig]] ; [[ctx]] \vdash [[K]] : [[kindS]]}} by

    sig |-ctx ctx
    -----------------------------  :: type
    sig ; ctx |- typeK : kindS

    sig ; ctx,A |- K : kindS
    ----------------------------- :: pi_intro
    sig ; ctx |- Pi A. pincK K : kindS

  defn
  sig ; ctx |- A : K  :: ::wftype::'ty_' {{tex [[sig]] ; [[ctx]] \vdash [[A]] : [[K]]}} by

    sig |-ctx ctx
    alpha : K in sig
    ------------------  :: tconst
    sig,alpha:K ; ctx |- alpha : K

    sig ; ctx,A |- B : typeK
    ----------------------------------------- :: pi_intro
    sig ; ctx |- Pi A . pincTy B : typeK 

    sig ; ctx |- A : Pi B . K
    sig ; ctx |- M : B
    ----------------------------------------- :: pi_elim
    sig ; ctx |- A M : psubsK (K) M

  defn
  sig ; ctx |- t : T  :: ::wfterm::'te_' {{tex [[sig]] ; [[ctx]] \vdash [[t]] : [[T]]}} by

    sig |-ctx ctx
    c : A in sig
    ----------------------  :: const
    sig ; ctx |- c : A

    sig |-ctx ctx,A
    ------------------------  :: var_z
    sig ; ctx,A |- zeroc : A

    sig |-ctx ctx,A
    sig ; ctx |- ic : B
    ----------------------  :: var_s
    sig ; ctx,A |- succ ic : B

    sig ; ctx,A |- M : B 
    ---------------------------------- :: pi_intro
    sig ; ctx |- \A. pincte M : Pi A. pincTy B 

    sig ; ctx |- M : Pi A . B 
    sig ; ctx |- N : A
    ------------------------------ :: pi_elim
    sig ; ctx |- M N : psubsTy (B) N

    sig ; ctx |- M : A
    sig ; ctx |- A' : typeK
    sig ; ctx |- A is A' : typeK
    ------------------------------ :: conv
    sig ; ctx |- M : A' 

%  defn 
%  sig ; ctx |- K is K' : kindS ::  :: substapkind :: 'eqK_' {{tex [[sig]] ; [[ctx]] \vdash [[K]] \equiv [[K']] : [[kindS]] }} by
%
%    sig ; ctx |- K : kindS
%    --------------------------- :: refl
%    sig ; ctx |- K is K : kindS
%
%    sig ; ctx |- K' is K : kindS
%    ---------------------------- :: sym
%    sig ; ctx |- K is K' : kindS
%
%    sig ; ctx |- K_1 is K_2 : kindS
%    sig ; ctx |- K_2 is K_3 : kindS
%    ------------------------------- :: trans
%    sig ; ctx |- K_1 is K_3 : kindS

  defn 
  sig ; ctx |- A is A' : K ::  :: substaptype :: 'eqT_' {{ tex [[sig]] ; [[ctx]] \vdash [[A]] \equiv [[A']] : [[K]] }} by

    sig ; ctx |- A : K
    --------------------------- :: refl
    sig ; ctx |- A is A : K

    sig ; ctx |- A' is A : K
    ---------------------------- :: sym
    sig ; ctx |- A is A' : K

    sig ; ctx |- A_1 is A_2 : K
    sig ; ctx |- A_2 is A_3 : K
    ------------------------------- :: trans
    sig ; ctx |- A_1 is A_3 : K

%    sig ; ctx |- A_1 is A_2 : K_1
%    sig ; ctx |- K_1 is K_2 : kindS
%    ------------------------------- :: ct
%    sig ; ctx |- T_1 is T_2 : K_2

%    sig ; ctx |- b : K
%    ---------------------------- :: 1
%    sig ; ctx |- b ap s is b : K

    sig ; ctx |- A is A' : typeK
    sig ; ctx |- B is B' : typeK
    ------------------------------------ :: 1
    sig ; ctx |- Pi A.B is Pi A'.B' : typeK

    sig ; ctx |- A is A' : typeK
    sig ; ctx |- M is M' : A
    ------------------------------------ :: 2
    sig ; ctx |- A M is A' M' : typeK

%    sig ; ctx |- T_1 ap s is T_1' : Pi x : T_2 . K
%    sig ; ctx |- T_2 ap s is T_2' : K_2
%    not (x isin dom (s))
%    ----------------------------------------------------------:: 3
%    sig ; ctx |- (Pi x:T_1.T_2) ap s is (Pi x:T_1'.T_2') : Pi x : T_1' . K_2

  defn 
  sig ; ctx |- M is M' : A ::  :: substapterm :: 'eqt_' {{ tex [[sig]] ; [[ctx]] \vdash [[M]] \equiv [[M']] : [[A]] }} by

    sig ; ctx |- M : A
    ----------------------- :: refl
    sig ; ctx |- M is M : A

    sig ; ctx |- M' is M : A
    ------------------------ :: sym
    sig ; ctx |- M is M' : A

    sig ; ctx |- M_1 is M_2 : A
    sig ; ctx |- M_2 is M_3 : A
    --------------------------- :: trans
    sig ; ctx |- M_1 is M_3 : A

    sig ; ctx |- M is M' : A
    sig ; ctx |- N is N' : B
    --------------------------------------- :: 1
    sig ; ctx |- (\A.M) N is psubste ( M')  N' : A

    sig ; ctx |- M is M' : Pi A . B
    sig ; ctx |- N is N' : A
    --------------------------------------- :: 2
    sig ; ctx |- M N is M' N' : psubsTy (B) N 

    sig ; ctx |- A is A' : typeK
    sig ; ctx |- M is M' : B
    ------------------------------------------ :: 3
    sig ; ctx |- \A.M is \A'.M' : Pi A.B


