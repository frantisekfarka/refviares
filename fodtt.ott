embed {{ tex-preamble \DeclareMathOperator{\dom}{dom} }}

metavar var {{ tex \mathcal{V} }}, x, y ::= {{ com  term variable }} 
    {{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
    {{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[var]]} }} {{ ocamllex alphanum0 }}

metavar con {{tex \mathcal{C} }}, c ::=   {{ com  term constant }} 
{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[con]]} }} {{ ocamllex Alphanum }}

metavar tcon {{ tex \mathcal{B} }}, alpha {{ tex \alpha}}, beta {{ tex \beta }} ::=   {{ com  type constants}} 
{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[tcon]]} }} {{ ocamllex Alphanum }}

grammar
K :: 'kind_' ::= {{ com Kinds }}
  | typeK               ::   :: type                   {{ com kind of all types }} 
  | Pi var : T . K      ::   :: pi (+ bind var in K +) {{ com kind of dependent functions }}
%  | Sigma var : T . K   ::   :: sigma (+ bind var in K +) {{ com kind of dependent pairs }}
  | K [ t / var ]       ::   :: subst {{ tex [[K]] [ [[t]] / [[var]] ] }} {{ com substitution of kind }}

T, A, B :: 'type_' ::= {{ com Types }}
  | tcon               ::   :: tcon    {{ com type constant }}
  | T t                ::   :: tapp    {{ com application of a type former }}
  | Pi var : T . T'    ::   :: pi    (+ bind var in T +)  {{ com type of dependent functions }}
%  | ( T )            ::   :: typaren
%  | T ap s           ::   :: tysubst {{ tex [[T]] [ [[s]] ] }}
%  | Sigma var : T. T'  ::   :: sigma  (+ bind var in T' +) {{ com kind of dependent pairs }}
  | T [ t / var ]       ::   :: subst {{ tex [[T]] [ [[t]] / [[var]] ] }} {{ com substitution of kind }}

t, M, N :: 'term_' ::= {{ com Terms }}
  | var              ::   :: var                   {{ com variables }} 
  | con              ::   :: const                 {{ com term constants }} 
  | \ var : T . t    ::   :: lam (+ bind var in t +) {{ com formation of $\Pi$ type }}
  | t t'             ::   :: app                   {{ com application }}
%  | < t , t' >       ::   :: sigma                 {{ com dependent pair }}
%%  | c_sig ( t , t' ) ::   :: el                    {{ com dependent pair elimination }} 
%  | ( t )        ::   :: teparen
%  | t ap s       ::   :: tesubst {{ tex [[t]] [ [[s]] ] }}
  | ( t )              ::   :: paren  
  | t [ t' / var ]     ::   :: subst {{ tex [[t]] [ [[t']] / [[var]] ] }} {{ com substitution of term}}

sig {{ tex \mathcal{S} }} :: 'signature_' ::= {{ com signature }}
  | sigempty     ::   :: sigempty
  | sig , con : T  ::   :: sigconst
  | sig , tcon : K  ::   :: sigtype

ctx {{ tex \Gamma }} :: 'context_' ::= {{ com context }}
  | ctxempty    ::   :: ctxempty
  | ctx , var : T  ::   :: ctxvar

terminals :: 'terminals_' ::=
  | typeK        ::   :: type     {{ tex \text{type} }}
  | kindS        ::   :: kind     {{ tex \text{kind} }}
  | \            ::   :: lambda   {{ tex \lambda }}
  | Pi           ::   :: pi       {{ tex \Pi }}
%  | Sigma        ::   :: sigma    {{ tex \Sigma }}
  | sigempty     ::   :: sigempty {{ tex \cdot}}
  | ctxempty     ::   :: ctxempty {{ tex \cdot}}
  | <            ::   :: lpar     {{ tex \langle }}
  | >            ::   :: rpar     {{ tex \rangle }}
  | c_sig        ::   :: csig     {{ tex c_\Sigma }} 
%  | substempty   ::   :: substempty {{ tex \cdot}}

formula :: formula_ ::=          
  | judgement              :: :: judgement
  | c notin dom ( sig )           :: :: cnotinsig     
                                         {{ tex [[c]] \not\in \dom([[sig]]) }}
  | alpha notin dom ( sig )           :: :: bnotinsig     
                                         {{ tex [[alpha]] \not\in \dom([[sig]]) }}
  | c : A in sig           :: :: cinsig     
                                         {{ tex [[c]] : [[A]] \in [[sig]] }}
  | alpha : K in sig           :: :: binsig     
                                         {{ tex [[alpha]] : [[K]] \in [[sig]] }}
  | x notin dom ( ctx )           :: :: xnotinctx     
                                         {{ tex [[x]] \not\in \dom([[ctx]]) }}
  | x : A in ctx           :: :: xinctx     
                                         {{ tex [[x]] : [[A]] \in [[ctx]] }}


%defns
%Jaux :: '' ::=
%
% defn
% c isin dom ( sig ) :: ::  cindomsig :: 'cindomsig_' {{ tex [[c]] \in \dom([[sig]])}} by 
%
%   ------------------- :: 1
%   c isin dom(sig,c:T)
%
%   c isin dom(sig)
%   ------------------- :: 2
%   c isin dom(sig,b:K)
%
%   c isin dom(sig)
%   -------------------- :: 3
%   c isin dom(sig,c':T)


defns
Jwellformed :: '' ::=


 defn
 |-sig sig :: ::wfsig::'sig_' {{ tex \vdash [[sig]] \text{ sig} }} by

    ---------------  :: empty
    |-sig sigempty

    |-sig sig
    sig ; ctxempty |- K : kindS
    alpha notin dom(sig)
    -------------------------- :: type
    |-sig sig,alpha:K

    |-sig sig
    sig ; ctxempty |- A : typeK
    c notin dom(sig) 
    -------------------------- :: con
    |-sig sig,c:A

  defn
  sig |-ctx ctx :: ::wfcon::'ctx_' {{tex [[sig]] \vdash [[ctx]] \text{ ctx} }} by
   
    |-sig sig
    --------------------  :: empty
    sig |-ctx ctxempty

    sig |-ctx ctx
    sig ; ctx |- A : typeK
    x notin dom(ctx) 
    -------------------------- :: var
    sig |-ctx ctx,x:A

  defn
  sig ; ctx |- K : kindS :: ::wfkind::'wfkind_' {{tex [[sig]] ; [[ctx]] \vdash [[K]] : [[kindS]]}} by

    sig |-ctx ctx
    -----------------------------  :: type
    sig ; ctx |- typeK : kindS

    sig ; ctx,x:A |- K : kindS
    ----------------------------- :: pi_k_intro
    sig ; ctx |- Pi x:A.K : kindS

  defn
  sig ; ctx |- A : K  :: ::wftype::'wftype_' {{tex [[sig]] ; [[ctx]] \vdash [[A]] : [[K]]}} by

    sig |-ctx ctx
    alpha : K in sig
    ------------------  :: tvar_z
    sig,alpha:K ; ctx |- alpha : K

%    |-sig sig,b:K
%    sig,b:K |-ctx ctx
%    ------------------  :: tvar_z
%    sig,b:K ; ctx |- b : K

%    |-sig sig,b:K
%    sig ; ctx |- b' : K'
%    ------------------  :: tvar_s
%    sig,b:K ; ctx |- b' : K'

%    sig ; ctx |- A : K
%    sig ; ctx |- K : kindS
%    sig ; ctx |- K is K' : kindS 
%    ---------------------------- :: t_eq
%    sig ; ctx |- T : K

    sig ; ctx,x:A |- B : typeK
    %K
    ----------------------------------------- :: pi_t_intro
    sig ; ctx |- Pi x : A . B : typeK 
    % Pi x : T . K

    sig ; ctx |- A : Pi x : B . K
    sig ; ctx |- M : B
    ----------------------------------------- :: pi_t_elim
    sig ; ctx |- A M : K [ M / x ] 

  defn
  sig ; ctx |- t : T  :: ::wfterm::'wfterm_' {{tex [[sig]] ; [[ctx]] \vdash [[t]] : [[T]]}} by

%    sig |-ctx ctx,x:T
%    ----------------------  :: var_z
%    sig ; ctx,x:T |- x : T

%    sig |-ctx ctx,x:T
%    sig ; ctx |- x' : T'
%    ----------------------  :: var_s
%    sig ; ctx,x:T |- x' : T'

    sig |-ctx ctx
    c : A in sig
    ----------------------  :: const
    sig ; ctx |- c : A

    sig |-ctx ctx
    x : A in ctx
    ----------------------  :: var
    sig ; ctx |- x : A

    sig ; ctx,x:A |- M : B 
    ---------------------------------- :: pi_intro
    sig ; ctx |- \x:A.M : Pi x : A . B 
    % Pi x : T . K

    sig ; ctx |- M : Pi x : A . B 
    sig ; ctx |- N : A
    ------------------------------ :: pi_elim
    sig ; ctx |- M N : B [ N / x ]

    sig ; ctx |- M : A
    sig ; ctx |- A' : typeK
    sig ; ctx |- A is A' : typeK
    ------------------------------ :: conv
    sig ; ctx |- M : A' 

%  defn 
%  sig ; ctx |- K is K' : kindS ::  :: substapkind :: 'eqK_' {{tex [[sig]] ; [[ctx]] \vdash [[K]] \equiv [[K']] : [[kindS]] }} by
%
%    sig ; ctx |- K : kindS
%    --------------------------- :: refl
%    sig ; ctx |- K is K : kindS
%
%    sig ; ctx |- K' is K : kindS
%    ---------------------------- :: sym
%    sig ; ctx |- K is K' : kindS
%
%    sig ; ctx |- K_1 is K_2 : kindS
%    sig ; ctx |- K_2 is K_3 : kindS
%    ------------------------------- :: trans
%    sig ; ctx |- K_1 is K_3 : kindS

  defn 
  sig ; ctx |- A is A' : K ::  :: substaptype :: 'eqT_' {{ tex [[sig]] ; [[ctx]] \vdash [[A]] \equiv [[A']] : [[K]] }} by

    sig ; ctx |- A : K
    --------------------------- :: refl
    sig ; ctx |- A is A : K

    sig ; ctx |- A' is A : K
    ---------------------------- :: sym
    sig ; ctx |- A is A' : K

    sig ; ctx |- A_1 is A_2 : K
    sig ; ctx |- A_2 is A_3 : K
    ------------------------------- :: trans
    sig ; ctx |- A_1 is A_3 : K

%    sig ; ctx |- A_1 is A_2 : K_1
%    sig ; ctx |- K_1 is K_2 : kindS
%    ------------------------------- :: ct
%    sig ; ctx |- T_1 is T_2 : K_2

%    sig ; ctx |- b : K
%    ---------------------------- :: 1
%    sig ; ctx |- b ap s is b : K

    sig ; ctx |- A is A' : typeK
    sig ; ctx |- B is B' : typeK
    ------------------------------------ :: 1
    sig ; ctx |- Pi x:A.B is Pi x:A'.B' : typeK

    sig ; ctx |- A is A' : typeK
    sig ; ctx |- M is M' : A
    ------------------------------------ :: 2
    sig ; ctx |- A M is A' M' : typeK

%    sig ; ctx |- T_1 ap s is T_1' : Pi x : T_2 . K
%    sig ; ctx |- T_2 ap s is T_2' : K_2
%    not (x isin dom (s))
%    ----------------------------------------------------------:: 3
%    sig ; ctx |- (Pi x:T_1.T_2) ap s is (Pi x:T_1'.T_2') : Pi x : T_1' . K_2

  defn 
  sig ; ctx |- M is M' : A ::  :: substapterm :: 'eqt_' {{ tex [[sig]] ; [[ctx]] \vdash [[M]] \equiv [[M']] : [[A]] }} by

    sig ; ctx |- M : A
    ----------------------- :: refl
    sig ; ctx |- M is M : A

    sig ; ctx |- M' is M : A
    ------------------------ :: sym
    sig ; ctx |- M is M' : A

    sig ; ctx |- M_1 is M_2 : A
    sig ; ctx |- M_2 is M_3 : A
    --------------------------- :: trans
    sig ; ctx |- M_1 is M_3 : A

    sig ; ctx |- M is M' : A
    sig ; ctx |- N is N' : B
    --------------------------------------- :: 1
    sig ; ctx |- (\x:A.M)N is M' [ N' / x ]  : A

    sig ; ctx |- M is M' : Pi x : A . B
    sig ; ctx |- N is N' : A
    --------------------------------------- :: 2
    sig ; ctx |- M N is M' N' : B [ N / x ]

    sig ; ctx |- A is A' : typeK
    sig ; ctx |- M is M' : B
    ------------------------------------------ :: 3
    sig ; ctx |- \x:A.M is \x:A'.M' : Pi x:A.B



substitutions
  single t x :: tsubst
